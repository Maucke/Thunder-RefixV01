<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Thunder-RefixV01\Thunder-RefixV01.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Thunder-RefixV01\Thunder-RefixV01.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Feb 23 20:29:12 2021
<BR><P>
<H3>Maximum Stack Usage =        288 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; OLED_UI::SUIMainShow() &rArr; OLED_Animation::OLED_CustormMotion(unsigned char) &rArr; OLED_Animation::Motion_TriangleF() &rArr; OLED_GFX::Fill_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_FastHLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7b]">cr4_fft_256_stm32</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[19]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[34]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[38]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[39]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3b]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3e]">DMA2_Stream5_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[40]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[31]">EXTI15_10_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[44]">FPU_IRQHandler</a> from stm32f4xx_it.o(i.FPU_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[43]">I2C3_ER_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[42]">I2C3_EV_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[3d]">OTG_FS_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[33]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[32]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[35]">SDIO_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[37]">SPI3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[45]">SPI4_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xc.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f4xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[36]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[41]">USART6_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f401xc.o(.text) referenced from startup_stm32f401xc.o(RESET)
 <LI><a href="#[4b]">[local to stm32f4xx_hal_adc_c]::ADC_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_adc_c_52ef8f5012ADC_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[49]">[local to stm32f4xx_hal_adc_c]::ADC_DMAConvCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_adc_c_52ef8f5015ADC_DMAConvCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4a]">[local to stm32f4xx_hal_adc_c]::ADC_DMAHalfConvCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_adc_c_52ef8f5019ADC_DMAHalfConvCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[4f]">[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[4e]">[local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[4d]">[local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
 <LI><a href="#[4c]">[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</a> from stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xc.o(.text)
 <LI><a href="#[52]">__sti___6_main_c_TableFFT</a> from main.o(i.__sti___6_main_c_TableFFT) referenced from main.o(.init_array)
 <LI><a href="#[51]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[50]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[54]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[6a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[191]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[56]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[192]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[193]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[194]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[195]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>cr4_fft_256_stm32</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cr4_fft_256_stm32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Pro
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[124]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_obj
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UI_In()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UI_In()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUI_In()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIDataPrss()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIDataPrss()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUIDataPrss()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_SnowflakeInit()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_MovmeteorInit()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleInit()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_PlanetInit()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_CircleInit()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleF()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Snowflake()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Movmeteor()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Triangle()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_MindInit()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Planet()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Circle()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Mind()
</UL>

<P><STRONG><a name="[196]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisCommand
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[71]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisComputermsg
</UL>

<P><STRONG><a name="[53]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertData
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[59]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[19c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[19d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1a0]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[55]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>AnalysisCommand</STRONG> (Thumb, 462 bytes, Stack size 16 bytes, usart.o(i.AnalysisCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AnalysisCommand &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>AnalysisComputermsg</STRONG> (Thumb, 592 bytes, Stack size 8 bytes, usart.o(i.AnalysisComputermsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AnalysisComputermsg &rArr; DS3231_SetUart() &rArr; DS3231_Time_Init(unsigned char*) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_SetUart()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertData
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drache_cmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[e4]"></a>AnalysisFFT</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usart.o(i.AnalysisFFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AnalysisFFT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[153]"></a>ClearFFT</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart.o(i.ClearFFT))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUI_Out()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUI_In()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUIMainShow()
</UL>

<P><STRONG><a name="[6f]"></a>ConvertData</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, usart.o(i.ConvertData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ConvertData &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisComputermsg
</UL>

<P><STRONG><a name="[38]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>Display_pbmp</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, oled_ui.o(i.Display_pbmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Display_pbmp
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_obj
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Time_Handle() &rArr; DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[7a]"></a>FFT_Pro</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, main.o(i.FFT_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = FFT_Pro &rArr; GetPowerMag() &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cr4_fft_256_stm32
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerMag()
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[7d]"></a>FFT_Start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.FFT_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FFT_Start &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[80]"></a>FFT_Stop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.FFT_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FFT_Stop &rArr; HAL_ADC_Stop_DMA &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[96]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[97]"></a>FLASH_FlushCaches</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[83]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_flash_c]::FLASH_SetErrorCode()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[44]"></a>FPU_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.FPU_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[86]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, main.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_ConvCpltCallback &rArr; FFT_Start &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Stop
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Start
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Pro
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_adc_c]::ADC_DMAConvCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[14a]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_adc_c]::ADC_DMAHalfConvCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[149]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_adc_c]::ADC_DMAConvCplt(__DMA_HandleTypeDef*)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_adc_c]::ADC_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[87]"></a>HAL_ADC_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_adc_c]::ADC_Init(ADC_HandleTypeDef*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[88]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Start
</UL>

<P><STRONG><a name="[112]"></a>HAL_ADC_Stop</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
</UL>

<P><STRONG><a name="[81]"></a>HAL_ADC_Stop_DMA</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Stop_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Stop_DMA &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Stop
</UL>

<P><STRONG><a name="[8f]"></a>HAL_DMA_Abort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DMAStop
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop_DMA
</UL>

<P><STRONG><a name="[cb]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>HAL_DMA_Init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init &rArr; [local to stm32f4xx_hal_dma_c]::DMA_CheckFifoParam(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_CheckFifoParam(__DMA_HandleTypeDef*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[8e]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[93]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_flash_ex_c]::FLASH_MassErase(unsigned char, unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[108]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[98]"></a>HAL_FLASH_Program</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_flash_c]::FLASH_Program_DoubleWord(unsigned, unsigned long long)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_flash_c]::FLASH_Program_HalfWord(unsigned, unsigned short)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_flash_c]::FLASH_Program_Word(unsigned, unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_flash_c]::FLASH_Program_Byte(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[106]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[9d]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; Time_Handle() &rArr; DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Handle()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delayms(unsigned short)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_exit_sleep_mode()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[79]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; Time_Handle() &rArr; DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
</UL>

<P><STRONG><a name="[9f]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte(unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte1()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[76]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, long)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte(unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte1()
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
</UL>

<P><STRONG><a name="[84]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>

<P><STRONG><a name="[e2]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a2]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>HAL_InitTick</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_MspInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a3]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[113]"></a>HAL_PWR_EnterSTOPMode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_pwr.o(i.HAL_PWR_EnterSTOPMode))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
</UL>

<P><STRONG><a name="[aa]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[14d]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[14c]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[ab]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ac]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 840 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[ad]"></a>HAL_SPI_DMAStop</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
</UL>

<P><STRONG><a name="[ae]"></a>HAL_SPI_Init</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[af]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, long)
</UL>

<P><STRONG><a name="[a6]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bf]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[7f]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Start
</UL>

<P><STRONG><a name="[18f]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Stop
</UL>

<P><STRONG><a name="[111]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
</UL>

<P><STRONG><a name="[b5]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Time_Handle() &rArr; DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Time_Handle() &rArr; DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Set_Wheel(unsigned short)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Calc_Color()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Handle()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DampAutoPos(unsigned char)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTxTransfer(__UART_HandleTypeDef*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[c9]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Transmit_IT(__UART_HandleTypeDef*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_UART_MspInit</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d2]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UART_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14e]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>

<P><STRONG><a name="[14f]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[72]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisComputermsg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drache_cmd
</UL>

<P><STRONG><a name="[ce]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>MX_ADC1_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>MX_DMA_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>MX_GPIO_Init</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>MX_SPI1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>MX_TIM3_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>MX_TIM4_Init</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>MX_TIM5_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, tim.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>MX_TIM9_Init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tim.o(i.MX_TIM9_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_TIM9_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>Recvcmd</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usart.o(i.Recvcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Recvcmd &rArr; Tranfcmd &rArr; STMFLASH_Write(unsigned, unsigned*, unsigned) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read(unsigned, unsigned*, unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tranfcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SendCommand</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usart.o(i.SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SendCommand &rArr; HAL_UART_Transmit &rArr; [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisComputermsg
</UL>

<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Time_Handle() &rArr; DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Time_Handle() &rArr; DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Time_Handle() &rArr; DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[b6]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e1]"></a>Tranfcmd</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, usart.o(i.Tranfcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Tranfcmd &rArr; STMFLASH_Write(unsigned, unsigned*, unsigned) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recvcmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USART1_IRQHandler &rArr; AnalysisComputermsg &rArr; DS3231_SetUart() &rArr; DS3231_Time_Init(unsigned char*) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisFFT
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisComputermsg
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisCommand
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xc.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>KeyProcess()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, main.o(i._Z10KeyProcessv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = KeyProcess() &rArr; module_pwr_enter_sleep_mode() &rArr; Tranfcmd &rArr; STMFLASH_Write(unsigned, unsigned*, unsigned) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>MainSysRun()</STRONG> (Thumb, 430 bytes, Stack size 24 bytes, main.o(i._Z10MainSysRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MainSysRun() &rArr; FFT_Start &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUI_In()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UI_Out()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UI_Out()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUI_Out()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UI_In()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UI_In()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUI_Out()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUI_Out()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::HUI_Out()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUI_In()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUI_In()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUI_In()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::HUI_In()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIDataPrss()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIDataPrss()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIDataPrss()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUIDataPrss()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUIDataPrss()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUIDataPrss()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::HUIDataPrss()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUI_Out()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Stop
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[170]"></a>SetCurrent(unsigned char, float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motion.o(i._Z10SetCurrenthf))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUI_In()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UI_In()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UI_In()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUI_In()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUI_In()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::HUI_In()
</UL>

<P><STRONG><a name="[c2]"></a>DampAutoPos(unsigned char)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, motion.o(i._Z11DampAutoPosh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DampAutoPos(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absl(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[7c]"></a>GetPowerMag()</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, main.o(i._Z11GetPowerMagv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetPowerMag() &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FFT_Pro
</UL>

<P><STRONG><a name="[a1]"></a>Time_Handle()</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, ds3231.o(i._Z11Time_Handlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Time_Handle() &rArr; DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadWrite_Time(unsigned char)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[e0]"></a>STMFLASH_Read(unsigned, unsigned*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stmflash.o(i._Z13STMFLASH_ReadjPjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STMFLASH_Read(unsigned, unsigned*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recvcmd
</UL>

<P><STRONG><a name="[6e]"></a>DS3231_SetUart()</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ds3231.o(i._Z14DS3231_SetUartv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DS3231_SetUart() &rArr; DS3231_Time_Init(unsigned char*) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX2BCD(unsigned char)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Time_Init(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisComputermsg
</UL>

<P><STRONG><a name="[101]"></a>IIC_Read_Byte1()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, i2c.o(i._Z14IIC_Read_Byte1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Read_Byte1() &rArr; SDA_IN() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned short)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[104]"></a>IIC_Write_Byte(unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, i2c.o(i._Z14IIC_Write_Byteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned short)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Write_Byte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[e3]"></a>STMFLASH_Write(unsigned, unsigned*, unsigned)</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, stmflash.o(i._Z14STMFLASH_WritejPjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = STMFLASH_Write(unsigned, unsigned*, unsigned) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_GetFlashSector(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tranfcmd
</UL>

<P><STRONG><a name="[100]"></a>DS3231_Time_Init(unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ds3231.o(i._Z16DS3231_Time_InitPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DS3231_Time_Init(unsigned char*) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Write_Byte(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_SetUart()
</UL>

<P><STRONG><a name="[10a]"></a>DS3231_Write_Byte(unsigned char, unsigned char)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ds3231.o(i._Z17DS3231_Write_Bytehh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DS3231_Write_Byte(unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Time_Init(unsigned char*)
</UL>

<P><STRONG><a name="[10d]"></a>SystemClock_Config()</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>DS3231_ReadWrite_Time(unsigned char)</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ds3231.o(i._Z21DS3231_ReadWrite_Timeh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DS3231_ReadWrite_Time(unsigned char) &rArr; DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Handle()
</UL>

<P><STRONG><a name="[109]"></a>DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ds3231.o(i._Z23DS3231_Operate_RegisterhPhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char) &rArr; IIC_Write_Byte(unsigned char) &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte(unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte1()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_ReadWrite_Time(unsigned char)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Time_Init(unsigned char*)
</UL>

<P><STRONG><a name="[107]"></a>STMFLASH_GetFlashSector(unsigned)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stmflash.o(i._Z23STMFLASH_GetFlashSectorj))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write(unsigned, unsigned*, unsigned)
</UL>

<P><STRONG><a name="[a0]"></a>module_pwr_exit_sleep_mode()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i._Z26module_pwr_exit_sleep_modev))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[e6]"></a>module_pwr_enter_sleep_mode()</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, main.o(i._Z27module_pwr_enter_sleep_modev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = module_pwr_enter_sleep_mode() &rArr; Tranfcmd &rArr; STMFLASH_Write(unsigned, unsigned*, unsigned) &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::SCR_reg(int, int)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tranfcmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_DMAStop
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSTOPMode
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess()
</UL>

<P><STRONG><a name="[fc]"></a>absl(int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motion.o(i._Z4absli))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DampAutoPos(unsigned char)
</UL>

<P><STRONG><a name="[102]"></a>SDA_IN()</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, i2c.o(i._Z6SDA_INv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDA_IN() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte(unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte1()
</UL>

<P><STRONG><a name="[15d]"></a>BCD2HEX(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ds3231.o(i._Z7BCD2HEXh))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UI_In()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UI_In()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIDataPrss()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIDataPrss()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUIDataPrss()
</UL>

<P><STRONG><a name="[9e]"></a>Delayms(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i._Z7Delaymst))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>

<P><STRONG><a name="[ff]"></a>HEX2BCD(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ds3231.o(i._Z7HEX2BCDh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HEX2BCD(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_SetUart()
</UL>

<P><STRONG><a name="[10f]"></a>IIC_Ack()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i._Z7IIC_Ackv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Ack() &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned short)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[105]"></a>SDA_OUT()</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c.o(i._Z7SDA_OUTv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte(unsigned char)
</UL>

<P><STRONG><a name="[10e]"></a>IIC_NAck()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i._Z8IIC_NAckv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_NAck() &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned short)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[10c]"></a>IIC_Stop()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i._Z8IIC_Stopv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Stop() &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned short)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Write_Byte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[103]"></a>delay_us(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c.o(i._Z8delay_ust))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start()
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte(unsigned char)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte1()
</UL>

<P><STRONG><a name="[10b]"></a>IIC_Start()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i._Z9IIC_Startv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Start() &rArr; SDA_OUT() &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us(unsigned short)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Operate_Register(unsigned char, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS3231_Write_Byte(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[150]"></a>SetTarget(unsigned char, float)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motion.o(i._Z9SetTargethf))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUI_In()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UI_Out()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UI_Out()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUI_Out()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UI_In()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UI_In()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUI_Out()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::HUI_Out()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUI_In()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUI_In()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::HUI_In()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIDataPrss()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIDataPrss()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUIDataPrss()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUI_Out()
</UL>

<P><STRONG><a name="[c5]"></a>OLED_Driver::Calc_Color()</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, oled_driver.o(i._ZN11OLED_Driver10Calc_ColorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_Driver::Calc_Color()
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[78]"></a>OLED_Driver::Draw_Pixel(long, long)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_Driver10Draw_PixelEll))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bbmp(int, int, int, int, const unsigned char*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SNF6x8(int, int, char*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_NF6x8(int, int, unsigned char, unsigned char)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Write_Line(short, short, short, short)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_LineS(short*, unsigned char)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_pbmp
</UL>

<P><STRONG><a name="[115]"></a>OLED_Driver::Draw_Pixel(long, long, unsigned short)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, oled_driver.o(i._ZN11OLED_Driver10Draw_PixelEllt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_hbmp(int, int, int, int, const unsigned char*, unsigned short)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bbmp(int, int, int, int, const unsigned char*, unsigned short)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bmp(int, int, int, int, const unsigned char*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_HFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short, unsigned short)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short, unsigned short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short, unsigned short)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short, unsigned short)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short, unsigned char, unsigned short)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Write_Line(short, short, short, short, unsigned short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_LineS(short*, unsigned char, unsigned short)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUIMainShow()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Snowflake()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Movmeteor()
</UL>

<P><STRONG><a name="[114]"></a>OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short)</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, oled_driver.o(i._ZN11OLED_Driver10OLED_BFAnyEiiiihPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SBFAny(int, int, char*, int, unsigned short)
</UL>

<P><STRONG><a name="[116]"></a>OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short, unsigned short)</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, oled_driver.o(i._ZN11OLED_Driver10OLED_BFAnyEiiiihPKhtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SBFAny(int, int, char*, int, unsigned short)
</UL>

<P><STRONG><a name="[117]"></a>OLED_Driver::OLED_HFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short)</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, oled_driver.o(i._ZN11OLED_Driver10OLED_HFAnyEiiiihPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Driver::OLED_HFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SHFAny(int, int, char*, int, unsigned short)
</UL>

<P><STRONG><a name="[118]"></a>OLED_Driver::OLED_NF6x8(int, int, unsigned char, unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 36 bytes, oled_driver.o(i._ZN11OLED_Driver10OLED_NF6x8Eiihh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OLED_Driver::OLED_NF6x8(int, int, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SNF6x8(int, int, char*)
</UL>

<P><STRONG><a name="[119]"></a>OLED_Driver::Write_Data(unsigned char*, long)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver10Write_DataEPhl))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Driver::Write_Data(unsigned char*, long) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Refrash_Screen()
</UL>

<P><STRONG><a name="[11a]"></a>OLED_Driver::Write_Data(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oled_driver.o(i._ZN11OLED_Driver10Write_DataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Driver::Write_Data(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::SCR_reg(int, int)
</UL>

<P><STRONG><a name="[11b]"></a>OLED_Driver::Device_Init()</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, oled_driver.o(i._ZN11OLED_Driver11Device_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OLED_Driver::Device_Init() &rArr; OLED_Driver::Refrash_Screen() &rArr; OLED_Driver::RAM_Address() &rArr; OLED_Driver::SCR_reg(int, int) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::SCR_reg(int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Refrash_Screen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>OLED_Driver::Display_bmp(int, int, int, int, const unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 52 bytes, oled_driver.o(i._ZN11OLED_Driver11Display_bmpEiiiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Driver::Display_bmp(int, int, int, int, const unsigned char*) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::HUIMainShow()
</UL>

<P><STRONG><a name="[11f]"></a>OLED_Driver::OLED_SBFAny(int, int, char*, int, unsigned short)</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, oled_driver.o(i._ZN11OLED_Driver11OLED_SBFAnyEiiPcit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OLED_Driver::OLED_SBFAny(int, int, char*, int, unsigned short) &rArr; OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short, unsigned short)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUIMainShow()
</UL>

<P><STRONG><a name="[120]"></a>OLED_Driver::OLED_SHFAny(int, int, char*, int, unsigned short)</STRONG> (Thumb, 162 bytes, Stack size 68 bytes, oled_driver.o(i._ZN11OLED_Driver11OLED_SHFAnyEiiPcit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = OLED_Driver::OLED_SHFAny(int, int, char*, int, unsigned short) &rArr; OLED_Driver::OLED_HFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_HFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>OLED_Driver::OLED_SNF6x8(int, int, char*)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, oled_driver.o(i._ZN11OLED_Driver11OLED_SNF6x8EiiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = OLED_Driver::OLED_SNF6x8(int, int, char*) &rArr; OLED_Driver::OLED_NF6x8(int, int, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_NF6x8(int, int, unsigned char, unsigned char)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIMainShow()
</UL>

<P><STRONG><a name="[122]"></a>OLED_Driver::RAM_Address()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, oled_driver.o(i._ZN11OLED_Driver11RAM_AddressEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_Driver::RAM_Address() &rArr; OLED_Driver::SCR_reg(int, int) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::SCR_reg(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Refrash_Screen()
</UL>

<P><STRONG><a name="[123]"></a>OLED_Driver::RandomColor()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, oled_driver.o(i._ZN11OLED_Driver11RandomColorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_Driver::RandomColor()
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_SnowflakeInit()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_MovmeteorInit()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleInit()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_PlanetInit()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_CircleInit()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleF()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Snowflake()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Movmeteor()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Triangle()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_MindInit()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Planet()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Circle()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Mind()
</UL>

<P><STRONG><a name="[11c]"></a>OLED_Driver::Clear_Screen()</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, oled_driver.o(i._ZN11OLED_Driver12Clear_ScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OLED_Driver::Clear_Screen()
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>OLED_Driver::Display_bbmp(int, int, int, int, const unsigned char*)</STRONG> (Thumb, 120 bytes, Stack size 60 bytes, oled_driver.o(i._ZN11OLED_Driver12Display_bbmpEiiiiPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Driver::Display_bbmp(int, int, int, int, const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_player
</UL>

<P><STRONG><a name="[126]"></a>OLED_Driver::Display_bbmp(int, int, int, int, const unsigned char*, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, oled_driver.o(i._ZN11OLED_Driver12Display_bbmpEiiiiPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Driver::Display_bbmp(int, int, int, int, const unsigned char*, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUIMainShow()
</UL>

<P><STRONG><a name="[127]"></a>OLED_Driver::Display_hbmp(int, int, int, int, const unsigned char*, unsigned short)</STRONG> (Thumb, 242 bytes, Stack size 52 bytes, oled_driver.o(i._ZN11OLED_Driver12Display_hbmpEiiiiPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = OLED_Driver::Display_hbmp(int, int, int, int, const unsigned char*, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUIMainShow()
</UL>

<P><STRONG><a name="[128]"></a>OLED_Driver::Write_Command(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, oled_driver.o(i._ZN11OLED_Driver13Write_CommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::SCR_reg(int, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Refrash_Screen()
</UL>

<P><STRONG><a name="[129]"></a>OLED_Driver::Draw_FastHLine(short, short, short)</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, oled_driver.o(i._ZN11OLED_Driver14Draw_FastHLineEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_Driver::Draw_FastHLine(short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
</UL>

<P><STRONG><a name="[12a]"></a>OLED_Driver::Draw_FastHLine(short, short, short, unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver14Draw_FastHLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Driver::Draw_FastHLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned char, unsigned short)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Triangle(short, short, short, short, short, short, unsigned short)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_obj
</UL>

<P><STRONG><a name="[12b]"></a>OLED_Driver::Draw_FastVLine(short, short, short)</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, oled_driver.o(i._ZN11OLED_Driver14Draw_FastVLineEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OLED_Driver::Draw_FastVLine(short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
</UL>

<P><STRONG><a name="[12c]"></a>OLED_Driver::Draw_FastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, oled_driver.o(i._ZN11OLED_Driver14Draw_FastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned char, unsigned short)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[11d]"></a>OLED_Driver::Refrash_Screen()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled_driver.o(i._ZN11OLED_Driver14Refrash_ScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_Driver::Refrash_Screen() &rArr; OLED_Driver::RAM_Address() &rArr; OLED_Driver::SCR_reg(int, int) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RAM_Address()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char*, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>OLED_Driver::WheelP(unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_Driver6WheelPEt))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UI_In()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UI_In()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIDataPrss()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIDataPrss()
</UL>

<P><STRONG><a name="[110]"></a>OLED_Driver::SCR_reg(int, int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, oled_driver.o(i._ZN11OLED_Driver7SCR_regEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_Driver::SCR_reg(int, int) &rArr; OLED_Driver::Write_Command(unsigned char) &rArr; HAL_SPI_Transmit &rArr; [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Command(unsigned char)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Write_Data(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RAM_Address()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_pwr_enter_sleep_mode()
</UL>

<P><STRONG><a name="[160]"></a>OLED_Driver::WheelPw(unsigned short)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_Driver7WheelPwEt))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UI_In()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UI_In()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIDataPrss()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIDataPrss()
</UL>

<P><STRONG><a name="[c4]"></a>OLED_Driver::Set_Wheel(unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_Driver9Set_WheelEt))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[173]"></a>OLED_Driver::OLED_Driver()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_DriverC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX__sub_object()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_UI__sub_object()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_UI()
</UL>

<P><STRONG><a name="[1a4]"></a>OLED_Driver::OLED_Driver__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, oled_driver.o(i._ZN11OLED_DriverC1Ev), UNUSED)

<P><STRONG><a name="[12d]"></a>OLED_Animation::Motion_Mind()</STRONG> (Thumb, 386 bytes, Stack size 56 bytes, oled_animation.o(i._ZN14OLED_Animation11Motion_MindEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OLED_Animation::Motion_Mind() &rArr; OLED_GFX::Fill_Circle(short, short, short, unsigned short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_MovMind(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_CustormMotion(unsigned char)
</UL>

<P><STRONG><a name="[134]"></a>OLED_Animation::OLED_Planet(unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, oled_animation.o(i._ZN14OLED_Animation11OLED_PlanetEh))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Planet()
</UL>

<P><STRONG><a name="[12e]"></a>OLED_Animation::OLED_MovMind(unsigned char)</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, oled_animation.o(i._ZN14OLED_Animation12OLED_MovMindEh))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Mind()
</UL>

<P><STRONG><a name="[131]"></a>OLED_Animation::Motion_Circle()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, oled_animation.o(i._ZN14OLED_Animation13Motion_CircleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_Animation::Motion_Circle() &rArr; OLED_Animation::OLED_FucCircle(unsigned char) &rArr; OLED_GFX::Fill_Circle(short, short, short, unsigned short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_FucCircle(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_CustormMotion(unsigned char)
</UL>

<P><STRONG><a name="[133]"></a>OLED_Animation::Motion_Planet()</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, oled_animation.o(i._ZN14OLED_Animation13Motion_PlanetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OLED_Animation::Motion_Planet() &rArr; OLED_GFX::Fill_Circle(short, short, short, unsigned short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short, unsigned short)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_Planet(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_CustormMotion(unsigned char)
</UL>

<P><STRONG><a name="[13a]"></a>OLED_Animation::OLED_Triangle(unsigned char)</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, oled_animation.o(i._ZN14OLED_Animation13OLED_TriangleEh))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleF()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Triangle()
</UL>

<P><STRONG><a name="[132]"></a>OLED_Animation::OLED_FucCircle(unsigned char)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, oled_animation.o(i._ZN14OLED_Animation14OLED_FucCircleEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OLED_Animation::OLED_FucCircle(unsigned char) &rArr; OLED_GFX::Fill_Circle(short, short, short, unsigned short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Circle()
</UL>

<P><STRONG><a name="[13d]"></a>OLED_Animation::OLED_Movmeteor(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, oled_animation.o(i._ZN14OLED_Animation14OLED_MovmeteorEh))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Movmeteor()
</UL>

<P><STRONG><a name="[138]"></a>OLED_Animation::Motion_MindInit()</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, oled_animation.o(i._ZN14OLED_Animation15Motion_MindInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Animation::Motion_MindInit() &rArr; OLED_Driver::RandomColor()
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_AllMotion_Init()
</UL>

<P><STRONG><a name="[139]"></a>OLED_Animation::Motion_Triangle()</STRONG> (Thumb, 1184 bytes, Stack size 80 bytes, oled_animation.o(i._ZN14OLED_Animation15Motion_TriangleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OLED_Animation::Motion_Triangle() &rArr; OLED_GFX::Draw_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_GFX::Draw_Line(short, short, short, short, unsigned short) &rArr; OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Triangle(short, short, short, short, short, short, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_Triangle(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_CustormMotion(unsigned char)
</UL>

<P><STRONG><a name="[13c]"></a>OLED_Animation::Motion_Movmeteor()</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, oled_animation.o(i._ZN14OLED_Animation16Motion_MovmeteorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_Animation::Motion_Movmeteor() &rArr; OLED_GFX::Fill_Circle(short, short, short, unsigned short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short, unsigned short)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_Movmeteor(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_CustormMotion(unsigned char)
</UL>

<P><STRONG><a name="[13e]"></a>OLED_Animation::Motion_Snowflake()</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, oled_animation.o(i._ZN14OLED_Animation16Motion_SnowflakeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_Animation::Motion_Snowflake() &rArr; OLED_GFX::Fill_Circle(short, short, short, unsigned short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short, unsigned short)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_MovSnowflake(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_CustormMotion(unsigned char)
</UL>

<P><STRONG><a name="[140]"></a>OLED_Animation::Motion_TriangleF()</STRONG> (Thumb, 1162 bytes, Stack size 80 bytes, oled_animation.o(i._ZN14OLED_Animation16Motion_TriangleFEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OLED_Animation::Motion_TriangleF() &rArr; OLED_GFX::Fill_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_FastHLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Triangle(short, short, short, short, short, short, unsigned short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Triangle(short, short, short, short, short, short, unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_Triangle(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_CustormMotion(unsigned char)
</UL>

<P><STRONG><a name="[142]"></a>OLED_Animation::Motion_CircleInit()</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, oled_animation.o(i._ZN14OLED_Animation17Motion_CircleInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Animation::Motion_CircleInit() &rArr; OLED_Driver::RandomColor()
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_AllMotion_Init()
</UL>

<P><STRONG><a name="[143]"></a>OLED_Animation::Motion_PlanetInit()</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, oled_animation.o(i._ZN14OLED_Animation17Motion_PlanetInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Animation::Motion_PlanetInit() &rArr; OLED_Driver::RandomColor()
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_AllMotion_Init()
</UL>

<P><STRONG><a name="[13f]"></a>OLED_Animation::OLED_MovSnowflake(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, oled_animation.o(i._ZN14OLED_Animation17OLED_MovSnowflakeEh))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Snowflake()
</UL>

<P><STRONG><a name="[144]"></a>OLED_Animation::OLED_CustormMotion(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, oled_animation.o(i._ZN14OLED_Animation18OLED_CustormMotionEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = OLED_Animation::OLED_CustormMotion(unsigned char) &rArr; OLED_Animation::Motion_TriangleF() &rArr; OLED_GFX::Fill_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_FastHLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleF()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Snowflake()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Movmeteor()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Triangle()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Planet()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Circle()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Mind()
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUIMainShow()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>OLED_Animation::Motion_TriangleInit()</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, oled_animation.o(i._ZN14OLED_Animation19Motion_TriangleInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_Animation::Motion_TriangleInit() &rArr; OLED_Driver::RandomColor()
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_AllMotion_Init()
</UL>

<P><STRONG><a name="[146]"></a>OLED_Animation::OLED_AllMotion_Init()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, oled_animation.o(i._ZN14OLED_Animation19OLED_AllMotion_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_Animation::OLED_AllMotion_Init() &rArr; OLED_Animation::Motion_TriangleInit() &rArr; OLED_Driver::RandomColor()
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_SnowflakeInit()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_MovmeteorInit()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleInit()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_PlanetInit()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_CircleInit()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_MindInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[148]"></a>OLED_Animation::Motion_MovmeteorInit()</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, oled_animation.o(i._ZN14OLED_Animation20Motion_MovmeteorInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Animation::Motion_MovmeteorInit() &rArr; OLED_Driver::RandomColor()
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_AllMotion_Init()
</UL>

<P><STRONG><a name="[147]"></a>OLED_Animation::Motion_SnowflakeInit()</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, oled_animation.o(i._ZN14OLED_Animation20Motion_SnowflakeInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Animation::Motion_SnowflakeInit() &rArr; OLED_Driver::RandomColor()
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::RandomColor()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_AllMotion_Init()
</UL>

<P><STRONG><a name="[189]"></a>OLED_Animation::OLED_Animation()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_animation.o(i._ZN14OLED_AnimationC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_TableFFT
</UL>

<P><STRONG><a name="[1a5]"></a>OLED_Animation::OLED_Animation__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, oled_animation.o(i._ZN14OLED_AnimationC1Ev), UNUSED)

<P><STRONG><a name="[f0]"></a>OLED_UI::GAMEUI_Out()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI10GAMEUI_OutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::GAMEUI_Out()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[ed]"></a>OLED_UI::HUIDataPrss()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_ui.o(i._ZN7OLED_UI11HUIDataPrssEv))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[151]"></a>OLED_UI::HUIMainShow()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI11HUIMainShowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OLED_UI::HUIMainShow() &rArr; OLED_Driver::Display_bmp(int, int, int, int, const unsigned char*) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bmp(int, int, int, int, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>OLED_UI::MUIDataPrss()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_ui.o(i._ZN7OLED_UI11MUIDataPrssEv))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[152]"></a>OLED_UI::MUIMainShow()</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, oled_ui.o(i._ZN7OLED_UI11MUIMainShowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OLED_UI::MUIMainShow() &rArr; OLED_FFT::Display_Style6() &rArr; OLED_GFX::Draw_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_GFX::Draw_Line(short, short, short, short, unsigned short) &rArr; OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style6()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style5()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style4()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style3()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style2()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style1()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFFT
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>OLED_UI::OLED_SLFAny(int, int, int, int, char*, int, unsigned short)</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, oled_ui.o(i._ZN7OLED_UI11OLED_SLFAnyEiiiiPcit))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = OLED_UI::OLED_SLFAny(int, int, int, int, char*, int, unsigned short) &rArr; OLED_UI::OLED_LFPixel(int, int, int, int, int, int, unsigned char, const unsigned char*, unsigned short) &rArr; OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_LFPixel(int, int, int, int, int, int, unsigned char, const unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUIMainShow()
</UL>

<P><STRONG><a name="[e9]"></a>OLED_UI::SUIDataPrss()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_ui.o(i._ZN7OLED_UI11SUIDataPrssEv))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[15c]"></a>OLED_UI::SUIMainShow()</STRONG> (Thumb, 984 bytes, Stack size 64 bytes, oled_ui.o(i._ZN7OLED_UI11SUIMainShowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OLED_UI::SUIMainShow() &rArr; OLED_Animation::OLED_CustormMotion(unsigned char) &rArr; OLED_Animation::Motion_TriangleF() &rArr; OLED_GFX::Fill_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_FastHLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_hbmp(int, int, int, int, const unsigned char*, unsigned short)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bbmp(int, int, int, int, const unsigned char*, unsigned short)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SBFAny(int, int, char*, int, unsigned short)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_CustormMotion(unsigned char)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>OLED_UI::TUIDataPrss()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI11TUIDataPrssEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::TUIDataPrss()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2HEX(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[15e]"></a>OLED_UI::TUIMainShow()</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, oled_ui.o(i._ZN7OLED_UI11TUIMainShowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OLED_UI::TUIMainShow() &rArr; OLED_UI::OLED_SLFAny(int, int, int, int, char*, int, unsigned short) &rArr; OLED_UI::OLED_LFPixel(int, int, int, int, int, int, unsigned char, const unsigned char*, unsigned short) &rArr; OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_SLFAny(int, int, int, int, char*, int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>OLED_UI::OLED_LFPixel(int, int, int, int, int, int, unsigned char, const unsigned char*, unsigned short)</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, oled_ui.o(i._ZN7OLED_UI12OLED_LFPixelEiiiiiihPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_UI::OLED_LFPixel(int, int, int, int, int, int, unsigned char, const unsigned char*, unsigned short) &rArr; OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_SLFAny(int, int, int, int, char*, int, unsigned short)
</UL>

<P><STRONG><a name="[eb]"></a>OLED_UI::T1UIDataPrss()</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, oled_ui.o(i._ZN7OLED_UI12T1UIDataPrssEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_UI::T1UIDataPrss()
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::WheelPw(unsigned short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::WheelP(unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2HEX(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[162]"></a>OLED_UI::T1UIMainShow()</STRONG> (Thumb, 940 bytes, Stack size 64 bytes, oled_ui.o(i._ZN7OLED_UI12T1UIMainShowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OLED_UI::T1UIMainShow() &rArr; OLED_GFX::Fill_Circle(short, short, short, unsigned short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SNF6x8(int, int, char*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned char, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short, unsigned short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>OLED_UI::T2UIDataPrss()</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, oled_ui.o(i._ZN7OLED_UI12T2UIDataPrssEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_UI::T2UIDataPrss()
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::WheelPw(unsigned short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::WheelP(unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2HEX(unsigned char)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[165]"></a>OLED_UI::T2UIMainShow()</STRONG> (Thumb, 1080 bytes, Stack size 48 bytes, oled_ui.o(i._ZN7OLED_UI12T2UIMainShowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_UI::T2UIMainShow() &rArr; OLED_GFX::Fill_Circle(short, short, short, unsigned short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SNF6x8(int, int, char*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned char, unsigned short)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short, unsigned short)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short, unsigned short)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short, unsigned char, unsigned short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Circle(short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e8]"></a>OLED_UI::GAMEUIDataPrss()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_ui.o(i._ZN7OLED_UI14GAMEUIDataPrssEv))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[167]"></a>OLED_UI::GAMEUIMainShow()</STRONG> (Thumb, 1120 bytes, Stack size 72 bytes, oled_ui.o(i._ZN7OLED_UI14GAMEUIMainShowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OLED_UI::GAMEUIMainShow() &rArr; OLED_Driver::OLED_SBFAny(int, int, char*, int, unsigned short) &rArr; OLED_Driver::OLED_BFAny(int, int, int, int, unsigned char, const unsigned char*, unsigned short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SBFAny(int, int, char*, int, unsigned short)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_click
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_player
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_obj
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blue_click
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>OLED_UI::HUI_In()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI6HUI_InEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::HUI_In()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrent(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[ee]"></a>OLED_UI::MUI_In()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, oled_ui.o(i._ZN7OLED_UI6MUI_InEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_UI::MUI_In()
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFFT
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[f7]"></a>OLED_UI::SUI_In()</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI6SUI_InEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::SUI_In()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrent(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[f9]"></a>OLED_UI::TUI_In()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI6TUI_InEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::TUI_In()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrent(unsigned char, float)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[f5]"></a>OLED_UI::HUI_Out()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI7HUI_OutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::HUI_Out()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[ef]"></a>OLED_UI::MUI_Out()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_ui.o(i._ZN7OLED_UI7MUI_OutEv))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearFFT
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[f1]"></a>OLED_UI::SUI_Out()</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI7SUI_OutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::SUI_Out()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[fa]"></a>OLED_UI::T1UI_In()</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, oled_ui.o(i._ZN7OLED_UI7T1UI_InEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_UI::T1UI_In()
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::WheelPw(unsigned short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::WheelP(unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2HEX(unsigned char)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrent(unsigned char, float)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[f8]"></a>OLED_UI::T2UI_In()</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, oled_ui.o(i._ZN7OLED_UI7T2UI_InEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_UI::T2UI_In()
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::WheelPw(unsigned short)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::WheelP(unsigned short)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD2HEX(unsigned char)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrent(unsigned char, float)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[f2]"></a>OLED_UI::TUI_Out()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI7TUI_OutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::TUI_Out()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[f3]"></a>OLED_UI::T1UI_Out()</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI8T1UI_OutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::T1UI_Out()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[f4]"></a>OLED_UI::T2UI_Out()</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI8T2UI_OutEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::T2UI_Out()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[f6]"></a>OLED_UI::GAMEUI_In()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, oled_ui.o(i._ZN7OLED_UI9GAMEUI_InEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::GAMEUI_In()
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTarget(unsigned char, float)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurrent(unsigned char, float)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainSysRun()
</UL>

<P><STRONG><a name="[172]"></a>OLED_UI::OLED_UI()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, oled_ui.o(i._ZN7OLED_UIC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_UI::OLED_UI() &rArr; OLED_UI::OLED_UI__sub_object() &rArr; OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_Driver()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX__sub_object()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_UI__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_TableFFT
</UL>

<P><STRONG><a name="[175]"></a>OLED_UI::OLED_UI__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, oled_ui.o(i._ZN7OLED_UIC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_UI::OLED_UI__sub_object() &rArr; OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_Driver()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_UI()
</UL>

<P><STRONG><a name="[154]"></a>OLED_FFT::Display_Style1()</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, oled_fft.o(i._ZN8OLED_FFT14Display_Style1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_FFT::Display_Style1() &rArr; OLED_GFX::Draw_Line(short, short, short, short, unsigned short) &rArr; OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUIMainShow()
</UL>

<P><STRONG><a name="[155]"></a>OLED_FFT::Display_Style2()</STRONG> (Thumb, 420 bytes, Stack size 72 bytes, oled_fft.o(i._ZN8OLED_FFT14Display_Style2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OLED_FFT::Display_Style2() &rArr; OLED_GFX::Draw_Line(short, short, short, short, unsigned short) &rArr; OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUIMainShow()
</UL>

<P><STRONG><a name="[156]"></a>OLED_FFT::Display_Style3()</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, oled_fft.o(i._ZN8OLED_FFT14Display_Style3Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OLED_FFT::Display_Style3() &rArr; OLED_GFX::Draw_Line(short, short, short, short, unsigned short) &rArr; OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUIMainShow()
</UL>

<P><STRONG><a name="[157]"></a>OLED_FFT::Display_Style4()</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, oled_fft.o(i._ZN8OLED_FFT14Display_Style4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OLED_FFT::Display_Style4() &rArr; OLED_GFX::Draw_LineS(short*, unsigned char) &rArr; OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_LineS(short*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUIMainShow()
</UL>

<P><STRONG><a name="[158]"></a>OLED_FFT::Display_Style5()</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, oled_fft.o(i._ZN8OLED_FFT14Display_Style5Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OLED_FFT::Display_Style5() &rArr; OLED_GFX::Draw_LineS(short*, unsigned char) &rArr; OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_LineS(short*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUIMainShow()
</UL>

<P><STRONG><a name="[159]"></a>OLED_FFT::Display_Style6()</STRONG> (Thumb, 2820 bytes, Stack size 80 bytes, oled_fft.o(i._ZN8OLED_FFT14Display_Style6Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OLED_FFT::Display_Style6() &rArr; OLED_GFX::Draw_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_GFX::Draw_Line(short, short, short, short, unsigned short) &rArr; OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs2
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Triangle(short, short, short, short, short, short, unsigned short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_LineS(short*, unsigned char, unsigned short)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_LineS(short*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUIMainShow()
</UL>

<P><STRONG><a name="[188]"></a>OLED_FFT::OLED_FFT()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, oled_fft.o(i._ZN8OLED_FFTC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_TableFFT
</UL>

<P><STRONG><a name="[1a6]"></a>OLED_FFT::OLED_FFT__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, oled_fft.o(i._ZN8OLED_FFTC1Ev), UNUSED)

<P><STRONG><a name="[176]"></a>OLED_GFX::Draw_LineS(short*, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, oled_gfx.o(i._ZN8OLED_GFX10Draw_LineSEPsh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_GFX::Draw_LineS(short*, unsigned char) &rArr; OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style6()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style5()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style4()
</UL>

<P><STRONG><a name="[178]"></a>OLED_GFX::Draw_LineS(short*, unsigned char, unsigned short)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, oled_gfx.o(i._ZN8OLED_GFX10Draw_LineSEPsht))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = OLED_GFX::Draw_LineS(short*, unsigned char, unsigned short) &rArr; OLED_GFX::Draw_Line(short, short, short, short, unsigned short) &rArr; OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style6()
</UL>

<P><STRONG><a name="[179]"></a>OLED_GFX::Write_Line(short, short, short, short)</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, oled_gfx.o(i._ZN8OLED_GFX10Write_LineEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_GFX::Write_Line(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short)
</UL>

<P><STRONG><a name="[17a]"></a>OLED_GFX::Write_Line(short, short, short, short, unsigned short)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, oled_gfx.o(i._ZN8OLED_GFX10Write_LineEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[163]"></a>OLED_GFX::Draw_Circle(short, short, short)</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, oled_gfx.o(i._ZN8OLED_GFX11Draw_CircleEsss))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_GFX::Draw_Circle(short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIMainShow()
</UL>

<P><STRONG><a name="[166]"></a>OLED_GFX::Draw_Circle(short, short, short, unsigned char, unsigned short)</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, oled_gfx.o(i._ZN8OLED_GFX11Draw_CircleEsssht))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_GFX::Draw_Circle(short, short, short, unsigned char, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
</UL>

<P><STRONG><a name="[137]"></a>OLED_GFX::Draw_Circle(short, short, short, unsigned short)</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, oled_gfx.o(i._ZN8OLED_GFX11Draw_CircleEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_GFX::Draw_Circle(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIMainShow()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Movmeteor()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_FucCircle(unsigned char)
</UL>

<P><STRONG><a name="[130]"></a>OLED_GFX::Fill_Circle(short, short, short, unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, oled_gfx.o(i._ZN8OLED_GFX11Fill_CircleEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_GFX::Fill_Circle(short, short, short, unsigned short) &rArr; OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short, unsigned short)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIMainShow()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Snowflake()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Movmeteor()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_FucCircle(unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Planet()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Mind()
</UL>

<P><STRONG><a name="[13b]"></a>OLED_GFX::Draw_Triangle(short, short, short, short, short, short, unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, oled_gfx.o(i._ZN8OLED_GFX13Draw_TriangleEsssssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OLED_GFX::Draw_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_GFX::Draw_Line(short, short, short, short, unsigned short) &rArr; OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Line(short, short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style6()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleF()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Triangle()
</UL>

<P><STRONG><a name="[141]"></a>OLED_GFX::Fill_Triangle(short, short, short, short, short, short, unsigned short)</STRONG> (Thumb, 392 bytes, Stack size 96 bytes, oled_gfx.o(i._ZN8OLED_GFX13Fill_TriangleEsssssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OLED_GFX::Fill_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_FastHLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleF()
</UL>

<P><STRONG><a name="[17b]"></a>OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short)</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, oled_gfx.o(i._ZN8OLED_GFX17FillCircle_HelperEssshst))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_GFX::FillCircle_Helper(short, short, short, unsigned char, short, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Circle(short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[169]"></a>OLED_GFX::Draw_Line(short, short, short, short)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, oled_gfx.o(i._ZN8OLED_GFX9Draw_LineEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_GFX::Draw_Line(short, short, short, short) &rArr; OLED_GFX::Write_Line(short, short, short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Write_Line(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style6()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style3()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style2()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style1()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_LineS(short*, unsigned char)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>

<P><STRONG><a name="[164]"></a>OLED_GFX::Draw_Line(short, short, short, short, unsigned char, unsigned short)</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, oled_gfx.o(i._ZN8OLED_GFX9Draw_LineEssssht))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_GFX::Draw_Line(short, short, short, short, unsigned char, unsigned short) &rArr; OLED_Driver::Draw_FastVLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short, unsigned short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIMainShow()
</UL>

<P><STRONG><a name="[12f]"></a>OLED_GFX::Draw_Line(short, short, short, short, unsigned short)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, oled_gfx.o(i._ZN8OLED_GFX9Draw_LineEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_GFX::Draw_Line(short, short, short, short, unsigned short) &rArr; OLED_GFX::Write_Line(short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastVLine(short, short, short, unsigned short)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short, unsigned short)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Write_Line(short, short, short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style6()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style5()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style4()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style3()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style2()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style1()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_Triangle(short, short, short, short, short, short, unsigned short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Draw_LineS(short*, unsigned char, unsigned short)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIMainShow()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUIMainShow()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Movmeteor()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Planet()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Mind()
</UL>

<P><STRONG><a name="[15f]"></a>OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, oled_gfx.o(i._ZN8OLED_GFX9Fill_RectEttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_player
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_obj
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_LFPixel(int, int, int, int, int, int, unsigned char, const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[17c]"></a>OLED_GFX::OLED_GFX()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled_gfx.o(i._ZN8OLED_GFXC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_GFX::OLED_GFX() &rArr; OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_Driver()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___6_main_c_TableFFT
</UL>

<P><STRONG><a name="[174]"></a>OLED_GFX::OLED_GFX__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled_gfx.o(i._ZN8OLED_GFXC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_Driver()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX()
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_UI__sub_object()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_UI()
</UL>

<P><STRONG><a name="[135]"></a>std::cos(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_fft.o(i._ZSt3cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = std::cos(float) &rArr; __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style6()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIMainShow()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleF()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Triangle()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Planet()
</UL>

<P><STRONG><a name="[136]"></a>std::sin(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled_fft.o(i._ZSt3sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = std::sin(float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style6()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIMainShow()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_TriangleF()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Triangle()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::Motion_Planet()
</UL>

<P><STRONG><a name="[17f]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a7]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[6c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisCommand
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1a9]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[181]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1aa]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[74]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Handle()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUIMainShow()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertData
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1ab]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ac]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[186]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[17d]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
</UL>

<P><STRONG><a name="[17e]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
</UL>

<P><STRONG><a name="[fd]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerMag()
</UL>

<P><STRONG><a name="[185]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[184]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[187]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[182]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[1ad]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ae]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[183]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[177]"></a>abs2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, oled_fft.o(i.abs2))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::Display_Style6()
</UL>

<P><STRONG><a name="[171]"></a>begin</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, oled_ui.o(i.begin))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;red_click
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUI_In()
</UL>

<P><STRONG><a name="[16c]"></a>blue_click</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, oled_ui.o(i.blue_click))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>

<P><STRONG><a name="[16e]"></a>check</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, oled_ui.o(i.check))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>

<P><STRONG><a name="[70]"></a>drache_cmd</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, usart.o(i.drache_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drache_cmd &rArr; HAL_UART_Transmit &rArr; [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AnalysisComputermsg
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>draw_obj</STRONG> (Thumb, 484 bytes, Stack size 56 bytes, oled_ui.o(i.draw_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = draw_obj &rArr; Display_pbmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Draw_FastHLine(short, short, short, unsigned short)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_pbmp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>

<P><STRONG><a name="[16b]"></a>draw_player</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, oled_ui.o(i.draw_player))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = draw_player &rArr; OLED_Driver::Display_bbmp(int, int, int, int, const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Display_bbmp(int, int, int, int, const unsigned char*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::Fill_Rect(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = main &rArr; OLED_UI::SUIMainShow() &rArr; OLED_Animation::OLED_CustormMotion(unsigned char) &rArr; OLED_Animation::Motion_TriangleF() &rArr; OLED_GFX::Fill_Triangle(short, short, short, short, short, short, unsigned short) &rArr; OLED_Driver::Draw_FastHLine(short, short, short, unsigned short) &rArr; OLED_Driver::Draw_Pixel(long, long, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Refrash_Screen()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Clear_Screen()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::OLED_SHFAny(int, int, char*, int, unsigned short)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Driver::Device_Init()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T2UIMainShow()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::T1UIMainShow()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::TUIMainShow()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::SUIMainShow()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::MUIMainShow()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::HUIMainShow()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_AllMotion_Init()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_CustormMotion(unsigned char)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drache_cmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recvcmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyProcess()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[168]"></a>red_click</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, oled_ui.o(i.red_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = red_click
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;begin
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::GAMEUIMainShow()
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[52]"></a>__sti___6_main_c_TableFFT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.__sti___6_main_c_TableFFT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __sti___6_main_c_TableFFT &rArr; OLED_UI::OLED_UI() &rArr; OLED_UI::OLED_UI__sub_object() &rArr; OLED_GFX::OLED_GFX__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_FFT::OLED_FFT()
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_GFX::OLED_GFX()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_UI::OLED_UI()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Animation::OLED_Animation()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[4b]"></a>[local to stm32f4xx_hal_adc_c]::ADC_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_adc_c_52ef8f5012ADC_DMAErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_adc_c]::ADC_DMAError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[49]"></a>[local to stm32f4xx_hal_adc_c]::ADC_DMAConvCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_adc_c_52ef8f5015ADC_DMAConvCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = [local to stm32f4xx_hal_adc_c]::ADC_DMAConvCplt(__DMA_HandleTypeDef*) &rArr; HAL_ADC_ConvCpltCallback &rArr; FFT_Start &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[4a]"></a>[local to stm32f4xx_hal_adc_c]::ADC_DMAHalfConvCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_adc_c_52ef8f5019ADC_DMAHalfConvCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_adc_c]::ADC_DMAHalfConvCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[89]"></a>[local to stm32f4xx_hal_adc_c]::ADC_Init(ADC_HandleTypeDef*)</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_adc_c_52ef8f508ADC_InitEP17ADC_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_adc_c]::ADC_Init(ADC_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[9a]"></a>[local to stm32f4xx_hal_flash_c]::FLASH_Program_Byte(unsigned, unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i._ZN43_INTERNAL_21_stm32f4xx_hal_flash_c_48aa8f3e18FLASH_Program_ByteEjh))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[9c]"></a>[local to stm32f4xx_hal_flash_c]::FLASH_Program_Word(unsigned, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i._ZN43_INTERNAL_21_stm32f4xx_hal_flash_c_48aa8f3e18FLASH_Program_WordEjj))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[85]"></a>[local to stm32f4xx_hal_flash_c]::FLASH_SetErrorCode()</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i._ZN43_INTERNAL_21_stm32f4xx_hal_flash_c_48aa8f3e18FLASH_SetErrorCodeEv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[9b]"></a>[local to stm32f4xx_hal_flash_c]::FLASH_Program_HalfWord(unsigned, unsigned short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i._ZN43_INTERNAL_21_stm32f4xx_hal_flash_c_48aa8f3e22FLASH_Program_HalfWordEjt))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[99]"></a>[local to stm32f4xx_hal_flash_c]::FLASH_Program_DoubleWord(unsigned, unsigned long long)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i._ZN43_INTERNAL_21_stm32f4xx_hal_flash_c_48aa8f3e24FLASH_Program_DoubleWordEjy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_flash_c]::FLASH_Program_DoubleWord(unsigned, unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[95]"></a>[local to stm32f4xx_hal_flash_ex_c]::FLASH_MassErase(unsigned char, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i._ZN46_INTERNAL_24_stm32f4xx_hal_flash_ex_c_6648b60e15FLASH_MassEraseEhj))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[92]"></a>[local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec13DMA_SetConfigEP19__DMA_HandleTypeDefjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to stm32f4xx_hal_dma_c]::DMA_SetConfig(__DMA_HandleTypeDef*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[90]"></a>[local to stm32f4xx_hal_dma_c]::DMA_CheckFifoParam(__DMA_HandleTypeDef*)</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec18DMA_CheckFifoParamEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_dma_c]::DMA_CheckFifoParam(__DMA_HandleTypeDef*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[91]"></a>[local to stm32f4xx_hal_dma_c]::DMA_CalcBaseAndBitshift(__DMA_HandleTypeDef*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_dma_c_c25f65ec23DMA_CalcBaseAndBitshiftEP19__DMA_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[a9]"></a>[local to stm32f4xx_hal_cortex_c]::__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i._ZN44_INTERNAL_22_stm32f4xx_hal_cortex_c_2992dbc018__NVIC_SetPriorityE9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[b1]"></a>[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd22SPI_EndRxTxTransactionEP19__SPI_HandleTypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned) &rArr; [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[14b]"></a>[local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_spi_c_5e7b22bd29SPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f4xx_hal_spi_c]::SPI_WaitFlagStateUntilTimeout(__SPI_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_spi_c]::SPI_EndRxTxTransaction(__SPI_HandleTypeDef*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[b9]"></a>[local to stm32f4xx_hal_tim_c]::TIM_ITRx_SetConfig(TIM_TypeDef*, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5218TIM_ITRx_SetConfigEP11TIM_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[b7]"></a>[local to stm32f4xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5224TIM_TI1_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_tim_c]::TIM_TI1_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[b8]"></a>[local to stm32f4xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i._ZN41_INTERNAL_19_stm32f4xx_hal_tim_c_a9d95b5224TIM_TI2_ConfigInputStageEP11TIM_TypeDefjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_tim_c]::TIM_TI2_ConfigInputStage(TIM_TypeDef*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[4f]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f13UART_DMAErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndTxTransfer(__UART_HandleTypeDef*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[d1]"></a>[local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*)</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f14UART_SetConfigEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_SetConfig(__UART_HandleTypeDef*) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ca]"></a>[local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f15UART_Receive_ITEP20__UART_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_Receive_IT(__UART_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>[local to stm32f4xx_hal_uart_c]::UART_Transmit_IT(__UART_HandleTypeDef*)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f16UART_Transmit_ITEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[4e]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_DMARxHalfCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMARxHalfCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[c8]"></a>[local to stm32f4xx_hal_uart_c]::UART_EndRxTransfer(__UART_HandleTypeDef*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_EndRxTransferEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[c7]"></a>[local to stm32f4xx_hal_uart_c]::UART_EndTxTransfer(__UART_HandleTypeDef*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f18UART_EndTxTransferEP20__UART_HandleTypeDef))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to stm32f4xx_hal_uart_c]::UART_DMAError(__DMA_HandleTypeDef*)
</UL>

<P><STRONG><a name="[4d]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f19UART_DMAReceiveCpltEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAReceiveCplt(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_Receive_DMA)
</UL>
<P><STRONG><a name="[4c]"></a>[local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f20UART_DMAAbortOnErrorEP19__DMA_HandleTypeDef))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_DMAAbortOnError(__DMA_HandleTypeDef*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[d3]"></a>[local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i._ZN42_INTERNAL_20_stm32f4xx_hal_uart_c_d497114f27UART_WaitOnFlagUntilTimeoutEP20__UART_HandleTypeDefj10FlagStatusjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = [local to stm32f4xx_hal_uart_c]::UART_WaitOnFlagUntilTimeout(__UART_HandleTypeDef*, unsigned, FlagStatus, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[18a]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[180]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[18d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
